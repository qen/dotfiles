[user]
  name = qen
  email = qen.empaces@gmail.com
[github]
  user = qen

[color]
  ui = auto

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
  whitespace = red reverse

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[core]
  whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol

[alias]
  st = status
  ci = commit
  br = branch --sort=-committerdate
  co = checkout
  df = diff
  lg = log -p
  lol = log --decorate --pretty=oneline --abbrev-commit
  lolb = log master..HEAD --decorate --pretty=oneline --abbrev-commit
  history = log --decorate --pretty=format:'%cr, %ci > %C(auto)%h%d %cn <%ce> %s'
  graph = log --graph --decorate --pretty=oneline --abbrev-commit --all
  ls = ls-files
  release = tag -n1
  d = difftool
  merge-squash-theirs = merge --squash -Xtheirs
  merge-squash = merge --squash
  ; tagrev = !echo $@
  ; edit = !$EDITOR $(git status --short | awk '$1 ~ /^M|A|U/ {print $2}')
  ; open = !$EDITOR $(git diff master..HEAD --name-only | grep -v 'db/schema' | grep -e '.rb$' -e '.slim$' -e '.haml$' -e '.js$' -e '.jsx$' -e '.jbuilder$' -e '.css$' -e '.scss$')
  ; open = !$EDITOR $(git diff $(git merge-base master HEAD) HEAD --name-only | grep -v 'db/schema' | grep -e '.rb$' -e '.slim$' -e '.haml$' -e '.js$' -e '.jsx$' -e '.jbuilder$' -e '.css$' -e '.scss$')
  ;; vim $(git files design-sprint)
  ;; files = !git diff --name-only
  files = "!f() { $EDITOR $(git diff --name-only ${1:-master}); }; f"
  ; git log master..HEAD --pretty=%h | tail -n1
  ;files = !$EDITOR $(git diff --name-only $(git log master..HEAD --pretty=%h | tail -n1))

  ; open = !$EDITOR $(git show --pretty="" --name-only HEAD)
  ; open = !$EDITOR $((git status --short | awk '$1 ~ /^M|A|U/ {print $2}'; git diff $(git merge-base master HEAD) HEAD --name-only) | sort | uniq | grep -v 'db/schema' | grep -e '.rb$' -e '.slim$' -e '.haml$' -e '.js$' -e '.jsx$' -e '.jbuilder$' -e '.css$' -e '.scss$')

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[core]
  whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
  excludesfile = /Users/qen/.gitignore

; [alias]
;   st = status
;   ci = commit
;   br = branch
;   co = checkout
;   df = diff
;   lg = log -p
;   lol = log --decorate --pretty=oneline --abbrev-commit
;   graph = log --graph --decorate --pretty=oneline --abbrev-commit --all
;   ls = ls-files
;   release = tag -n1
;   d = difftool
;   tagrev = echo $@
;   changedfiles = diff-tree --no-commit-id --name-only -r
;   yolo = !git commit -am \"$(curl -s whatthecommit.com/index.txt)\"
;   # http://josephhsu.com/post/2582726215/open-all-modified-files-tracked-by-git-in-default
;   edit = !$EDITOR $(git status --short | awk '$1 ~ /^M|A|U/ {print $2}' )
;   files = !$EDITOR $(git diff --name-only --diff-filter=AM HEAD master | grep -v 'db/schema')

[push]
  default = simple

[filter "hawser"]
  clean = git hawser clean %f
  smudge = git hawser smudge %f
  required = true

# - http://vimcasts.org/episodes/fugitive-vim-resolving-merge-conflicts-with-vimdiff/
# - https://coderwall.com/p/qbtnsw/use-fugitive-as-git-mergetool
[merge]
  tool = fugitive
  ; conflictstyle = diff3

[mergetool "fugitive"]
  ; cmd = MERGETOOL="yes" nvim -d -c \"$LOCAL\" \"$MERGED\" \"$REMOTE\"
  cmd = nvim -d \"$LOCAL\" \"$MERGED\" \"$REMOTE\"
[pull]
  rebase = true
